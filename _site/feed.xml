<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-31T12:59:37+08:00</updated><id>http://localhost:4000/</id><title type="html">欢迎来到首都北京</title><subtitle>精彩世界，敬请期待。</subtitle><entry><title type="html">mybatis参数解析逻辑</title><link href="http://localhost:4000/jekyll/update/2018/01/31/mybatis-params-resolver.html" rel="alternate" type="text/html" title="mybatis参数解析逻辑" /><published>2018-01-31T11:21:00+08:00</published><updated>2018-01-31T11:21:00+08:00</updated><id>http://localhost:4000/jekyll/update/2018/01/31/mybatis-params-resolver</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/01/31/mybatis-params-resolver.html">&lt;p&gt;我们的sql操作往往需要使用参数，那么我们在使用mybatis的时候给方法提供的参数是如何被解析的呢？&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;整个解析过程分为方法形参解析和实参映射两部分。&lt;/li&gt;
  &lt;li&gt;当我们调用一个mapper的方法时，mybatis做的第一步是进行实参转换，生成一个通用的参数对象。&lt;/li&gt;
  &lt;li&gt;解析过程用到了ParamNameResolver对象，发生在ParamNameResolver在预处理Method的时候。&lt;/li&gt;
  &lt;li&gt;ParamNameResolver遍历方法参数：
    &lt;ol&gt;
      &lt;li&gt;如果参数是ResultHandler或者RowBonds，跳过。&lt;/li&gt;
      &lt;li&gt;如果参数有param注解，取得注解值作为name。&lt;/li&gt;
      &lt;li&gt;如果没有param注解，则使用形参名作为name。&lt;/li&gt;
      &lt;li&gt;如果没有形参，则使用&lt;strong&gt;有效&lt;/strong&gt;参数序号作为name。&lt;/li&gt;
      &lt;li&gt;所有的参数存储到一个参数序号-&amp;gt;name的 TreeMap中。使用TreeMap的原因是TreeMap可以保证数据按照参数的顺序有序。&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;通过实参生成参数对象时，如果没有实参，返回一个Null，否则取得前面所讲的TreeMap，遍历这个TreeMap，按照name-&amp;gt;实参数组[参数序号]的结构把数据放到一个ParamMap中，解析得到的参数对象就是这个ParamMap。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;参数对象的使用我们将在方法调用中介绍&lt;/strong&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">我们的sql操作往往需要使用参数，那么我们在使用mybatis的时候给方法提供的参数是如何被解析的呢？ 整个解析过程分为方法形参解析和实参映射两部分。 当我们调用一个mapper的方法时，mybatis做的第一步是进行实参转换，生成一个通用的参数对象。 解析过程用到了ParamNameResolver对象，发生在ParamNameResolver在预处理Method的时候。 ParamNameResolver遍历方法参数： 如果参数是ResultHandler或者RowBonds，跳过。 如果参数有param注解，取得注解值作为name。 如果没有param注解，则使用形参名作为name。 如果没有形参，则使用有效参数序号作为name。 所有的参数存储到一个参数序号-&amp;gt;name的 TreeMap中。使用TreeMap的原因是TreeMap可以保证数据按照参数的顺序有序。 通过实参生成参数对象时，如果没有实参，返回一个Null，否则取得前面所讲的TreeMap，遍历这个TreeMap，按照name-&amp;gt;实参数组[参数序号]的结构把数据放到一个ParamMap中，解析得到的参数对象就是这个ParamMap。 参数对象的使用我们将在方法调用中介绍</summary></entry><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/01/27/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-01-27T21:55:58+08:00</published><updated>2018-01-27T21:55:58+08:00</updated><id>http://localhost:4000/jekyll/update/2018/01/27/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/01/27/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry></feed>